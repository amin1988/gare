<?phpif (!defined("_BASEDIR_"))    exit();include_model("Modello", "Categoria", "Persona", "Coach", "Arbitro");define("_LOCANDINA_SUBDIR_", "locandine/");define("_LOCANDINA_DEFAULT_", _LOCANDINA_SUBDIR_ . "default.jpg");/** * @access public * @package models */class Stage extends Modello{ //TODO eliminare tutti i file allegati e la locandina    /**     * @var Allegato[]     */    private $allegati = NULL;    private $tabella = NULL;    /**     * Restituisce lo storico delle gare     * @return Gara[]     */    public static function getStagePassate()    {        /* @var $conn Connessione */        $conn = $GLOBALS["connint"];        $conn->connetti();        return self::listaStage($conn->select("gare", "  (tipo_evento LIKE 'raduno_regionale' OR tipo_evento LIKE 'stage_nazionale')   AND (datafine IS NULL OR datafine < CURDATE()) AND data < CURDATE() ORDER BY data DESC"));    }    /**     * Restituisce le gare pubbliche non chiuse     * @param int $zone     * @return Gara[]     */    public static function getStageAttive()    {        /* @var $conn Connessione */        $conn = $GLOBALS["connint"];        $conn->connetti();        return self::listaStage($conn->select("gare", "  (tipo_evento LIKE 'raduno_regionale' OR tipo_evento LIKE 'stage_nazionale')   AND   !( (datafine IS NULL OR datafine < CURDATE()) AND data < CURDATE()  ) ORDER BY data DESC"));    }    /**     * Restituisce le gare pubbliche non ancora finite     * @param int $zone     * @return Gara[]     */    public static function getStagePubblicheNonTerminate()    {        /* @var $conn Connessione */        $conn = $GLOBALS["connint"];        $conn->connetti();        return self::listaStage($conn->select("gareprog", "pubblica = 1"));    }    /**     * @param int[] $idgare     * @return Gara[]     */    public static function insieme($idgare)    {        /* @var $conn Connessione */        $conn = $GLOBALS["connint"];        $conn->connetti();        $ins = $conn->flatArray($idgare);        return self::listaStage($conn->select("garefuture", "idgara IN $ins"));    }    /**     * @param mysqli_result $mr     * @return Gara[]      */    private static function listaStage($mr)    {        $gare = array();        while ($row = $mr->fetch_assoc())        {            $g = new Gara();            $g->carica($row);            $gare[$g->getChiave()] = $g;        }        return $gare;    }    public static function fromId($id)    {        /* @var $conn Connessione */        $conn = $GLOBALS["connint"];        $conn->connetti();        $mr = $conn->select("gare", "idgara='$id'");        $row = $mr->fetch_assoc();        if ($row !== NULL)        {            $g = new Gara();            $g->carica($row);            return $g;        } else            return NULL;    }    public function __construct($id = NULL, $tabella = "gare")    {        parent::__construct($tabella, "idgara", $id);    }    public function insertPresenze($id_gara, $id_atleta, $id_societa)    {        $conn = $GLOBALS["connint"];        $conn->connetti();        $mr = $conn->select("partecipanti_stage", "id_gara='$id_gara' AND id_atleta = '$id_atleta' AND id_societa= '$id_societa' ");        if ($mr)        {            $row = $mr->fetch_assoc();            if ($row == null)            {                $query = "INSERT INTO partecipanti_stage "                        . "(`id`, `id_atleta`, `id_societa`, `id_gara`) "                        . " VALUES(NULL,$id_atleta,$id_societa,$id_gara)";                $res = $conn->query($query);            }        }    }    public function deleteFromPresenzeStage($id_gara, $elenco_atleti_da_eliminare, $id_societa)    {        $conn = $GLOBALS["connint"];        $conn->connetti();        if (empty($elenco_atleti_da_eliminare))        {            $query = "DELETE FROM partecipanti_stage WHERE convalidato = 2 AND id_gara = $id_gara AND id_societa=$id_societa ";            $res = $conn->query($query);        } else        {            for ($i = 0; $i < count($elenco_atleti_da_eliminare); $i++)            {                $id_atleta = $elenco_atleti_da_eliminare[$i];                $query = "DELETE FROM partecipanti_stage WHERE convalidato = 2 AND id_gara = $id_gara AND id_societa=$id_societa AND  id_atleta = " . $id_atleta;                $res = $conn->query($query);            }        }        return true;    }    public function getRowPresenzeDiff($id_gara, $lista_atleti_selezionati, $id_societa)    {        $where_id_atleti = "";        if (!empty($lista_atleti_selezionati))        {            $where_id_atleti = ' AND (id_atleta NOT IN (' . implode(",", $lista_atleti_selezionati) . ") )";        }        $conn = $GLOBALS["connint"];        $conn->connetti();        $query = "SELECT * FROM partecipanti_stage WHERE id_gara='$id_gara' $where_id_atleti AND id_societa= '$id_societa'  AND convalidato=2  ";        $mr = $conn->query($query);        // $mr = $conn->select("partecipanti_stage", "id_gara='$id_gara' $where_id_atleti AND id_societa= '$id_societa'  AND convalidato=0 ");        $array_da_eliminare = array();        if ($mr)        {            while ($row = $mr->fetch_assoc())            {                $array_da_eliminare[] = $row['id_atleta'];            }        }        return $array_da_eliminare;    }    public function searchPartecipanteStage($id_gara, $id_atleta)    {        $conn = $GLOBALS["connint"];        $conn->connetti();        $mr = $conn->select("partecipanti_stage", "id_gara='$id_gara' AND id_atleta = '$id_atleta' ");        $row = $mr->fetch_assoc();        if ($mr)        {            if ($row == null)            {                return false; //non esiste            }        }        return true; // esiste    }    public function getPresenzeStage($id_gara, $flag = 0)    {        //flag=0 non convalidati, 1 convalidati, 2 tutti        $convalidato = "";        switch ($flag)        {            case 0:                $convalidato = 0;                break;            case 1:                $convalidato = 1;                break;            case 2:                $convalidato = 2;                break;        }        $conn = $GLOBALS["connint"];        $conn->connetti();        $where = ($convalidato > 0) ? " WHERE id_gara=$id_gara  AND convalidato = " . $convalidato : " WHERE id_gara=".$id_gara;        $query = " SELECT * FROM partecipanti_stage "                . $where;        $res = $conn->query($query);        $array_presenze = array();        if ($res)        {            while ($row = $res->fetch_assoc())            {                $array_presenze[] = $row;            }        }        return $array_presenze;    }    public function getAnagraficaAtleta($id_atleta)    {        if (empty($id_atleta))        {            return false;        }        /*          $conn = $GLOBALS["connint"];          $conn->connetti();          $query = " SELECT a.nome, a.cognome, CASE WHEN a.sesso=1 THEN 'M' when a.sesso=2 THEN 'F'  END as sesso, a.nascita, s.nomebreve "          . " FROM atleti as a LEFT JOIN societa AS s ON a.idsocieta=s.idsocieta "          . " WHERE a.idatleta = ".$id_atleta;         */        $conn_tess = $GLOBALS["connest"];        $conn_tess->connetti();        $query = " SELECT t.nome, t.cognome, CASE WHEN t.sesso=1 THEN 'M' when t.sesso=2 THEN 'F'  END as sesso, t.data_nascita, s.nomebreve "                . " FROM tesserati as t LEFT JOIN societa AS s ON t.idsocieta=s.idsocieta "                . " WHERE t.idtesserato = " . $id_atleta;        $res = $conn_tess->query($query);        $row = array();        if ($res)        {            $row = $res->fetch_assoc();        }        return $row;    }    public function getNome()    {        return $this->get("nome");    }    public function getIDStage()    {        return $this->getChiave();    }    public function convalidaPresenze($id_gara, $id_societa, $id_tesserato)    {        if (empty($id_gara))        {            return false;        }        if (empty($id_societa))        {            return false;        }        if (empty($id_tesserato))        {            return false;        }        $conn = $GLOBALS["connint"];        $conn->connetti();        $where = " WHERE id_gara = $id_gara  AND id_societa=$id_societa AND id_atleta=$id_tesserato  ";        $query = "UPDATE partecipanti_stage SET `convalidato` = '1' " . $where;        $res = $conn->query($query);        return $res;    }    /**     * @access public     * @param string $nome     * @return void     */    public function setNome($nome)    {        $this->set("nome", $nome);    }    public function getDescrizione()    {        return $this->get("descrizione");    }    public function setDescrizione($desc)    {        $this->set("descrizione", $desc);    }    public function getWkc()    {        return $this->get("wkc");    }    public function setWkc($wkc)    {        $this->set("wkc", $wkc);    }    /**     * @access public     * @return Data     */    public function getDataStage()    {        return $this->getData("data");    }    /**     * @access public     * @param Data $data     */    public function setDataStage($data)    {        $this->setData("data", $data);    }    /**     * @return Data o NULL se la gara si svolge in un unico giorno     */    public function getDataFineStage()    {        return $this->getData("datafine");    }    /**     * @access public     * @param Data $data     */    public function setDataFineStage($data)    {        $this->setData("datafine", $data);    }    /**     * @access public     * @return Data     */    public function getChiusura()    {        return $this->getData("chiusura");    }    /**     * @access public     * @param Data $chiusura     */    public function setChiusura($chiusura)    {        $this->setData("chiusura", $chiusura);    }    /**     * Indica se le iscrizioni per la gara sono chiuse     * @access public     * @return boolean     */    public function iscrizioniChiuse()    {        return $this->getChiusura()->passata();    }    /**     * @return boolean     */    public function passata()    {        return $this->getDataGara()->passata();    }    /**     * @access public     * @return boolean     */    public function isPubblica()    {        return $this->getBool("pubblica");    }    /**     * @access public     * @param boolean $pubblica     */    public function setPubblica($pubblica)    {        $this->setBool("pubblica", $pubblica);    }    /**     * Indica se la lista dei partecipanti � stata pubblicata     * @return boolean     */    public function listaPubblicata()    {        return $this->getBool("mostrapart");    }    /**     * @param boolean $valore     */    public function setListaPubblicata($valore)    {        $this->setBool("mostrapart", $valore);    }    public function haLocandina()    {        return !is_null($this->get("locandina"));    }    /**     * @access public     * @return string     */    public function getLocandina()    {        if (is_null($this->get("locandina")))            return _LOCANDINA_DEFAULT_;        else            return _LOCANDINA_SUBDIR_ . $this->getChiave() . "." . $this->get("locandina");    }    /**     * @access public     * @param string $locandina     */    public function setLocandina($locandina)    {        $this->set("locandina", $locandina);    }    /**     * @access public     * @return Allegato[]     */    public function getAllegati()    {        if (is_null($this->allegati))            $this->allegati = Allegato::listaAllegati($this->getChiave());        return $this->allegati;    }    /**     * @access public     * @param Allegato[] allegati     */    public function setAllegati($allegati)    {        //TODO non va, rifare        $this->setLista("allegati", $allegati);    }}?>